/**
 * @file data_operations.h
 * @author Francisco Martins a106902
 *         Marco Sevegrand a106807
 *         Hugo Soares a107293
 * @date 28 Dec 2024
 * @brief Header file for data operations on repositories.
 */

#ifndef _DATA_OPERATIONS_H_
#define _DATA_OPERATIONS_H_

// Third-party library headers
#include <glib.h>

// Project headers
#include "database.h"
#include "data_container.h"

/**
 * @brief Gets the key associated with the highest value in a hash table.
 *
 * This function searches for the key with the highest value in the provided hash table. 
 * If there is a tie (multiple elements with the same value), the tie_breaker_type is used 
 * to resolve the tie.
 *
 * @param hashtable The hash table containing the keys and associated values.
 * @param tie_breaker_type A value indicating how to break ties if multiple elements have the same value.
 * @return The key associated with the highest value in the hash table.
 */
char *get_key_by_highest_value(GHashTable *hashtable, int tie_breaker_type);

/**
 * @brief Compares two values in a hash table based on their associated values.
 *
 * This function is used for sorting or comparing keys in a hash table based on their values. 
 * It helps to order or identify which key corresponds to the greater value.
 *
 * @param a The first value to compare.
 * @param b The second value to compare.
 * @param user_data Additional data that can be passed to customize the comparison.
 * @return A negative value if `a` is less than `b`, a positive value if `a` is greater than `b`, 
 *         or zero if they are equal.
 */
int compare_keys_by_value(void *a, void *b, void *user_data);

/**
 * @brief Increases the value associated with a given key in a data container.
 *
 * This function increments the value associated with a specific key in a data container. 
 * It is often used to count occurrences or accumulate totals.
 *
 * @param container The data container storing the key-value pairs.
 * @param key The key whose associated value is to be incremented.
 * @param increase The amount to increase the value by.
 */
void increase_value_by_key(DataContainer container, const char *key, int increase);

/**
 * @brief Increments the value associated with a given key by 1.
 *
 * This function increases the value associated with a specific key in a data container by 1.
 * It is typically used to count occurrences or tally values.
 *
 * @param container The data container storing the key-value pairs.
 * @param key The key whose associated value is to be incremented by 1.
 */
void increment_value_by_key(DataContainer container, const char *key);

/**
 * @brief Retrieves a hash table with genre popularity within a specified age interval.
 *
 * This function retrieves a hash table that contains the popularity of music genres 
 * within a specified age range. It helps analyze the preferences of users within a specific age group.
 *
 * @param database The database that contains information about users' ages and their genre preferences.
 * @param min_age The minimum age of the age interval.
 * @param max_age The maximum age of the age interval.
 * @return A hash table associating each genre with its popularity in the given age interval.
 */
GHashTable *get_genres_popularity_within_age_interval(Database database, int min_age, int max_age);

/**
 * @brief Retrieves the top 10 artists and their occurrences in a specified date range.
 *
 * This function fetches the top 10 most popular artists within a given date range, 
 * along with the number of times each artist has appeared (e.g., through plays or other events).
 *
 * @param database The database containing the artist information and their occurrences.
 * @param begin_date The starting date of the range.
 * @param end_date The ending date of the range.
 * @return An array containing the top 10 artists and their occurrences during the specified date range.
 */
char **get_top10_artist_and_occurences(Database database, const char *begin_date, const char *end_date);

/**
 * @brief Retrieves the total revenue of a specific artist.
 *
 * This function calculates the total revenue generated by an artist, which can be based on streams, 
 * sales, or other sources of income associated with the artist.
 *
 * @param database The database containing the artist's revenue data.
 * @param artist_id The ID of the artist whose total revenue is being requested.
 * @return A string representing the total revenue of the specified artist.
 */
char *get_artist_total_recipe(Database database, const char *artist_id);

#endif // _DATA_OPERATIONS_H_
